import junit.framework.Assert;
//import org.junit.Test;
import org.junit.jupiter.api.Test
import java.math.BigInteger;

public class API3SmokeTest {

    public API3SmokeTest(){

    }

    @Test
    public void testInput(){

        int input = 5;

        ComputeConceptualBoundaryAPI ccba = new ComputeConceptualBoundaryAPI();

        BigInteger computation = ccba.computation(input);

        Assert.assertEquals(BigInteger.valueOf(2), computation);

    }

    @Test
    public void testOneInput(){

        int input = 1;

        ComputeConceptualBoundaryAPI ccba = new ComputeConceptualBoundaryAPI();

        BigInteger computation = ccba.computation(input);

        Assert.assertEquals(BigInteger.ONE, computation);


    }

    @Test
    public void testLargeInput(){

        int input = 1500;

        ComputeConceptualBoundaryAPI ccba = new ComputeConceptualBoundaryAPI();

        BigInteger computation = ccba.computation(input);

        Assert.assertEquals((new BigInteger("185541459259042693647581659024474311354650214917826958151702272207449543791716" +
                "4477907823321886528516762797507716423398159477879313621314543079968464559240724788549358445218718842762122436715" +
                "65825864069907121974673529704933633614375353783832548825882036556738792940044460090842917790626415560913227626050" +
                "507744243284190182093952237913374828229637545193787356707468690459507129149310736741436448565848966992929552066298" +
                "6447342967782921154023975025701333423934658342763257192719529608352727728754729649743112020895823742026142968059880" +
                "41541326535526150383749727582230529606102699004790473189687122410225869944682827061785656142278775089017187782697021" +
                "911593802709829097760817453863453330384400581768543276866038801999277789484239896011195719628587834715920418744668720" +
                "6214980244531163840752880736236881938228827859608622365709655563562881473350435415190877730135141344039386956853909289" +
                "44015902534578468317939838254671780742556957666525245423291034752563819872650109373371372701458450502530617977921185078" +
                "045937473291401331826110843791540027632791340578223402011417172201161039682935683360090460095098093359820343385712803655" +
                "8789154347680705974892686049208861233903254510294674529238724482798799082032027400813702672929491490347488962887808278896" +
                "85868944641753662554625080020649467417513711709885371089966693549714717224456505275360527005893591547531758841466199169687" +
                "506108405541251510924111594661044509462726978515432837895644859281587752925549358310788188282075904580531715667382936720770" +
                "5072820063930916595732312211601492550728420321163785654197785446654796007369549646180265454306140631597980062400757385965394" +
                "03574637749741065086506170389529893671686943865526042225764901598183185988280385536000000000000000000000000000000000000000000" +
                "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" +
                "00000000000000000000000000000000000000000000000000000000000000000000000000000000")), computation);
    }

    @Test
    public void testNegativeInput(){

        //would return null normally, but because of how the for loop is defined it will always return 1

        int input = -15;

        ComputeConceptualBoundaryAPI ccba = new ComputeConceptualBoundaryAPI();

        BigInteger computation = ccba.computation(input);

        Assert.assertEquals(BigInteger.valueOf(1),computation);
    }

}
